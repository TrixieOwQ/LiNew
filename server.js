require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;
const DATA_FILE = 'data.json';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!TELEGRAM_TOKEN || !ADMIN_CHAT_ID) {
  console.error('üñ§‚ùå TELEGRAM_BOT_TOKEN –∏ TELEGRAM_ADMIN_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
  console.error(`üñ§‚ÄºÔ∏è Polling error: ${error.code} - ${error.message}`);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
let products = [];
let orders = [];

function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE));
      products = data.products || [];
      orders = data.orders || [];
      console.log(`üñ§‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤, ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    }
  } catch (e) {
    console.error('üñ§‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

function saveData() {
  try {
    const data = JSON.stringify({ products, orders }, null, 2);
    fs.writeFileSync(DATA_FILE, data);
    console.log('üñ§üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (e) {
    console.error('üñ§‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

// Middleware
app.use(express.json());
app.use(express.static('public'));

// API –¥–ª—è —Å–∞–π—Ç–∞
app.get('/api/products', (req, res) => {
  const availableProducts = products
    .filter(p => {
      return Object.values(p.quantities).some(qty => qty > 0);
    })
    .map(p => ({
      ...p,
      available: Object.values(p.quantities).some(qty => qty > 0)
    }));
  res.json(availableProducts);
});

app.get('/api/photo/:fileId', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const fileUrl = await bot.getFileLink(fileId);
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    response.data.pipe(res);
  } catch (error) {
    console.error('üñ§‚ùå Error fetching photo:', error);
    res.status(404).send('üñ§‚ùå –§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
});

app.post('/api/order', (req, res) => {
  const { name, contact, items } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤  
  let validItems = [];  
  let error = null;  
  
  items.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    if (!product) {  
      error = `üñ§‚ùå –¢–æ–≤–∞—Ä ${item.title} –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`;  
    } else if (!product.quantities[item.size] || product.quantities[item.size] < item.qty) {  
      error = `üñ§‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${product.title} (—Ä–æ–∑–º—ñ—Ä: ${item.size}, –∑–∞–ª–∏—à–∏–ª–æ—Å—å: ${product.quantities[item.size] || 0})`;  
    } else {  
      validItems.push(item);  
    }  
  });  
  
  if (error || validItems.length === 0) {  
    return res.status(400).json({   
      success: false,  
      message: error || 'üñ§‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'  
    });  
  }  
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    product.quantities[item.size] -= item.qty;  
  });  
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞  
  const newOrder = {  
    id: Date.now(),  
    date: new Date().toISOString(),  
    name,  
    contact,  
    items: validItems  
  };  
  
  orders.push(newOrder);  
  saveData();  
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram  
  let message = `üñ§ü¶á *–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!* #${newOrder.id}\n`;  
  message += `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n`;  
  message += `üë§ *–Ü–º'—è:* ${name}\n`;  
  message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${contact}\n\n`;  
  message += `üõí *–¢–æ–≤–∞—Ä–∏:*\n`;  
  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    message += `- ${product.title} (${item.size})\n`;  
    message += `  üí∞ –¶—ñ–Ω–∞: ‚Ç¥${product.price} x ${item.qty}\n`;  
    message += `  üñ§ –ó–∞–≥–∞–ª–æ–º: ‚Ç¥${(product.price * item.qty).toFixed(2)}\n`;  
  });  
  
  const total = validItems.reduce((sum, item) => {  
    const product = products.find(p => p.id === item.id);  
    return sum + (product.price * item.qty);  
  }, 0);  
  
  message += `\nüíÄ *–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* ‚Ç¥${total.toFixed(2)}\n`;  
  message += `‚è≥ *–î–∞—Ç–∞:* ${new Date().toLocaleString('uk-UA')}`;  
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram  
  bot.sendMessage(ADMIN_CHAT_ID, message, { parse_mode: 'Markdown' })  
    .catch(err => console.error('üñ§‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err));  
  
  res.json({ success: true });
});

// –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
const userStates = {};

// –°–æ—Å—Ç–æ—è–Ω–∏—è
const STATE = {
  IDLE: 'IDLE',
  ADDING_TITLE: 'ADDING_TITLE',
  ADDING_DESC: 'ADDING_DESC',
  ADDING_PRICE: 'ADDING_PRICE',
  ADDING_SIZES: 'ADDING_SIZES',
  ADDING_QUANTITY_FOR_SIZE: 'ADDING_QUANTITY_FOR_SIZE',
  ADDING_PHOTOS: 'ADDING_PHOTOS',
  EDITING_PRODUCT: 'EDITING_PRODUCT',
  EDITING_FIELD: 'EDITING_FIELD',
  EDITING_PHOTOS: 'EDITING_PHOTOS',
  DELETING_PRODUCT: 'DELETING_PRODUCT',
  MOVING_PRODUCT: 'MOVING_PRODUCT'
};

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
function resetState(chatId) {
  delete userStates[chatId];
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const menu = {
    reply_markup: {
      keyboard: [
        ['üñ§ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', 'üï∏ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤'],
        ['üîÆ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä', 'üíÄ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä'],
        ['üßõ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫']
      ],
      resize_keyboard: true
    }
  };

  const welcomeMessage = `
üñ§ü¶á *–¢–µ–º–Ω–∏–π –õ–∞–±—ñ—Ä–∏–Ω—Ç –¢–æ—Ä–≥—ñ–≤–ª—ñ*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ...
  `;
  
  bot.sendMessage(chatId, welcomeMessage, { 
    parse_mode: 'Markdown',
    ...menu 
  });  
  resetState(chatId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  showMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  bot.sendMessage(chatId, 'üñ§‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ');  
  showMainMenu(chatId);
});

// =================================================
// –ì–û–¢–ò–ß–ï–°–ö–ò–ô –°–¢–ò–õ–¨ - –ò–ù–¢–ï–†–§–ï–ô–°
// =================================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
function handleAddingPhotos(chatId, msg) {
  const state = userStates[chatId];
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
  if (msg.photo) {
    if (state.productData.photos.length >= 10) {
      bot.sendMessage(chatId, 'üñ§‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ');
      return;
    }
    
    const photo = msg.photo[msg.photo.length - 1];
    state.productData.photos.push(photo.file_id);
    
    bot.sendMessage(
      chatId, 
      `üñ§üñº –î–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ: ${state.productData.photos.length}/10\n` +
      `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n` +
      `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"`
    );
  }
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–æ"
  else if (msg.text && (msg.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || msg.text.includes('üñ§ –≥–æ—Ç–æ–≤–æ'))) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
    if (state.productData.photos.length === 0) {
      bot.sendMessage(chatId, 'üñ§‚ùå –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  
    const newProduct = {  
      id: Date.now(),  
      ...state.productData  
    };  
      
    products.push(newProduct);  
    saveData();  
      
    const successMsg = `
üñ§‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ!*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
–ù–∞–∑–≤–∞: ${newProduct.title}
–¶—ñ–Ω–∞: ‚Ç¥${newProduct.price}
    `;
    
    bot.sendMessage(chatId, successMsg, { parse_mode: 'Markdown' });  
    showMainMenu(chatId);
  }
  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
  else {
    bot.sendMessage(
      chatId, 
      'üñ§‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
function handleEditingPhotos(chatId, msg) {
  const state = userStates[chatId];
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
  if (msg.photo) {
    if (state.photos.length >= 10) {
      bot.sendMessage(chatId, 'üñ§‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ');
      return;
    }
    
    const photo = msg.photo[msg.photo.length - 1];
    state.photos.push(photo.file_id);
    
    bot.sendMessage(
      chatId, 
      `üñ§üñº –î–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ: ${state.photos.length}/10\n` +
      `‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n` +
      `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"`
    );
  }
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–æ"
  else if (msg.text && (msg.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ' || msg.text.includes('üñ§ –≥–æ—Ç–æ–≤–æ'))) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ
    if (state.photos.length === 0) {
      bot.sendMessage(chatId, 'üñ§‚ùå –î–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ');
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const product = state.editingProduct;
    product.photos = state.photos;
    saveData();
    
    bot.sendMessage(chatId, `üñ§‚úÖ –§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    state.state = STATE.EDITING_FIELD;
    delete state.photos;
    
    // –ü–æ–∫–∞–∂–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const menu = {
      reply_markup: {
        keyboard: [
          ['‚úèÔ∏è –ù–∞–∑–≤–∞', '‚úèÔ∏è –û–ø–∏—Å'],
          ['‚úèÔ∏è –¶—ñ–Ω–∞', '‚úèÔ∏è –†–æ–∑–º—ñ—Ä–∏'],
          ['‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å', '‚úèÔ∏è –§–æ—Ç–æ'],
          ['üñ§ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è']
        ],
        resize_keyboard: true
      }
    };
    
    bot.sendMessage(chatId, `üîÆ –©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?`, menu);
  }
  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
  else {
    bot.sendMessage(
      chatId, 
      'üñ§‚ùå –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
function handleAddingQuantityForSize(chatId, text) {
  const state = userStates[chatId];
  const currentSize = state.sizes[state.currentSizeIndex];
  const quantity = parseInt(text);

  if (isNaN(quantity)) {
    bot.sendMessage(chatId, 'üñ§‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ');
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  state.productData.quantities[currentSize] = quantity;
  state.currentSizeIndex++;

  // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ä–∞–∑–º–µ—Ä—ã
  if (state.currentSizeIndex < state.sizes.length) {
    bot.sendMessage(chatId, `üñ§üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É ${state.sizes[state.currentSizeIndex]}:`);
  } else {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ
    state.state = STATE.ADDING_PHOTOS;
    state.productData.photos = [];
    
    const photoMsg = `
üñ§üñº *–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–¥–æ 10)
–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"
    `;
    
    bot.sendMessage(chatId, photoMsg, { parse_mode: 'Markdown' });
  }
}

// =================================================
// –û–°–ù–û–í–ù–û–ô –ö–û–î –° –ì–û–¢–ò–ß–ï–°–ö–ò–ú –°–¢–ò–õ–ï–ú
// =================================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  const text = msg.text;  
  const state = userStates[chatId]?.state || STATE.IDLE;  
  
  // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞
  if (state !== STATE.IDLE && text && text.startsWith('/')) {  
    return;  
  }  
  
  switch (state) {  
    case STATE.IDLE:  
      handleIdleState(chatId, text);  
      break;  
    case STATE.ADDING_TITLE:  
      handleAddingTitle(chatId, text);  
      break;  
    case STATE.ADDING_DESC:  
      handleAddingDesc(chatId, text);  
      break;  
    case STATE.ADDING_PRICE:  
      handleAddingPrice(chatId, text);  
      break;  
    case STATE.ADDING_SIZES:  
      handleAddingSizes(chatId, text);  
      break;  
    case STATE.ADDING_QUANTITY_FOR_SIZE:  
      handleAddingQuantityForSize(chatId, text);  
      break;  
    case STATE.ADDING_PHOTOS:  
      handleAddingPhotos(chatId, msg);  
      break;  
    case STATE.EDITING_PRODUCT:  
      handleEditingProduct(chatId, text);  
      break;  
    case STATE.EDITING_FIELD:  
      handleEditingField(chatId, msg);  
      break;  
    case STATE.EDITING_PHOTOS:  
      handleEditingPhotos(chatId, msg);  
      break;  
    case STATE.DELETING_PRODUCT:  
      handleDeletingProduct(chatId, text);  
      break;  
    case STATE.MOVING_PRODUCT:  
      handleMovingProduct(chatId, text);  
      break;  
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleIdleState(chatId, text) {
  switch (text) {
    case 'üñ§ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä':
      userStates[chatId] = {
        state: STATE.ADDING_TITLE,
        productData: {
          quantities: {}
        }
      };
      bot.sendMessage(chatId, 'üñ§üìù –ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É:');
      break;

    case 'üï∏ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, 'üñ§‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î');  
      } else {  
        let message = 'üñ§üï∏ *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤*\n';  
        message += '‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n\n';  
        products.forEach((p, i) => {  
          message += `üñ§ ${i+1}. ${p.title}\n`;  
          message += `   üí∞ –¶—ñ–Ω–∞: ‚Ç¥${p.price}\n`;  
          message += `   üñ§ –ù–∞—è–≤–Ω—ñ—Å—Ç—å:\n`;
          for (const [size, qty] of Object.entries(p.quantities)) {
            message += `      - ${size}: ${qty} —à—Ç.\n`;
          }
          message += '\n';
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case 'üîÆ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, 'üñ§‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î');  
      } else {  
        userStates[chatId] = { state: STATE.EDITING_PRODUCT };  
        let message = 'üîÆ *–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä*\n';  
        message += '‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case 'üíÄ –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, 'üñ§‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î');  
      } else {  
        userStates[chatId] = { state: STATE.DELETING_PRODUCT };  
        let message = 'üíÄ *–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä*\n';  
        message += '‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case 'üßõ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è':  
      if (orders.length === 0) {  
        bot.sendMessage(chatId, 'üñ§‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î');  
      } else {  
        let message = 'üßõ *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*\n';  
        message += '‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n\n';  
        orders.slice(-5).reverse().forEach(order => {  
          message += `üÜî #${order.id}\n`;  
          message += `üë§ ${order.name}\n`;  
          message += `üìû ${order.contact}\n`;  
          message += `üìÖ ${new Date(order.date).toLocaleString('uk-UA')}\n`;  
          message += `üõí ${order.items.length} —Ç–æ–≤–∞—Ä(—ñ–≤)\n\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫':  
      if (products.length < 2) {  
        bot.sendMessage(chatId, 'üñ§‚ÑπÔ∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 —Ç–æ–≤–∞—Ä–∏');  
      } else {  
        userStates[chatId] = { state: STATE.MOVING_PRODUCT };  
        let message = 'üîÑ *–ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫*\n';  
        message += '‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî\n\n';  
        message += '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
function handleAddingTitle(chatId, text) {
  userStates[chatId].productData.title = text;
  userStates[chatId].state = STATE.ADDING_DESC;
  bot.sendMessage(chatId, 'üñ§üìù –û–ø–∏—Å —Ç–æ–≤–∞—Ä—É:');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
function handleAddingDesc(chatId, text) {
  userStates[chatId].productData.desc = text;
  userStates[chatId].state = STATE.ADDING_PRICE;
  bot.sendMessage(chatId, 'üñ§üí∞ –¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É:');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
function handleAddingPrice(chatId, text) {
  const price = parseFloat(text);
  if (isNaN(price)) {
    bot.sendMessage(chatId, 'üñ§‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ');
    return;
  }

  userStates[chatId].productData.price = price;  
  userStates[chatId].state = STATE.ADDING_SIZES;  
  bot.sendMessage(chatId, 'üñ§üìè –†–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª.: S,M,L):');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
function handleAddingSizes(chatId, text) {
  const sizes = text.split(',').map(s => s.trim()).filter(s => s);
  if (sizes.length === 0) {
    bot.sendMessage(chatId, 'üñ§‚ùå –í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–æ–∑–º—ñ—Ä');
    return;
  }

  const state = userStates[chatId];
  state.sizes = sizes;
  state.currentSizeIndex = 0;
  state.state = STATE.ADDING_QUANTITY_FOR_SIZE;
  
  bot.sendMessage(chatId, `üñ§üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É ${sizes[0]}:`);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
function handleEditingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    userStates[chatId] = {
      state: STATE.EDITING_FIELD,
      editingProductId: product.id,
      editingProduct: product
    };

    const menu = {  
      reply_markup: {  
        keyboard: [  
          ['‚úèÔ∏è –ù–∞–∑–≤–∞', '‚úèÔ∏è –û–ø–∏—Å'],  
          ['‚úèÔ∏è –¶—ñ–Ω–∞', '‚úèÔ∏è –†–æ–∑–º—ñ—Ä–∏'],  
          ['‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å', '‚úèÔ∏è –§–æ—Ç–æ'],  
          ['üñ§ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è']  
        ],  
        resize_keyboard: true  
      }  
    };  
    
    const msg = `
üîÆ *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
${product.title}

–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?
    `;
      
    bot.sendMessage(chatId, msg, { 
      parse_mode: 'Markdown',
      ...menu 
    });  
  } else {  
    bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä');  
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
function handleEditingField(chatId, msg) {
  const state = userStates[chatId];
  const text = msg.text;
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (text === 'üñ§ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è') {  
    bot.sendMessage(chatId, 'üñ§‚úÖ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');  
    saveData();  
    showMainMenu(chatId);  
    return;  
  }  
  
  // –í—ã–±–æ—Ä –ø–æ–ª—è
  if (!state.editingField) {
    switch (text) {  
      case '‚úèÔ∏è –ù–∞–∑–≤–∞':  
        state.editingField = 'title';  
        bot.sendMessage(chatId, 'üñ§üìù –ù–æ–≤–∞ –Ω–∞–∑–≤–∞:');  
        break;  
      case '‚úèÔ∏è –û–ø–∏—Å':  
        state.editingField = 'desc';  
        bot.sendMessage(chatId, 'üñ§üìù –ù–æ–≤–∏–π –æ–ø–∏—Å:');  
        break;  
      case '‚úèÔ∏è –¶—ñ–Ω–∞':  
        state.editingField = 'price';  
        bot.sendMessage(chatId, 'üñ§üí∞ –ù–æ–≤–∞ —Ü—ñ–Ω–∞:');  
        break;  
      case '‚úèÔ∏è –†–æ–∑–º—ñ—Ä–∏':  
        state.editingField = 'sizes';  
        bot.sendMessage(chatId, 'üñ§üìè –ù–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:');  
        break;  
      case '‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å':  
        state.editingField = 'quantities';  
        bot.sendMessage(chatId, 'üñ§üî¢ –ù–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (—Ñ–æ—Ä–º–∞—Ç: S:10,M:5):');  
        break;  
      case '‚úèÔ∏è –§–æ—Ç–æ':  
        state.state = STATE.EDITING_PHOTOS;
        state.photos = [...state.editingProduct.photos] || [];
        
        const photoMsg = `
üñ§üñº *–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—ñ —Ñ–æ—Ç–æ (–¥–æ 10)
–ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ - –Ω–∞–ø–∏—à—ñ—Ç—å "üñ§ –≥–æ—Ç–æ–≤–æ"
        `;
        
        bot.sendMessage(chatId, photoMsg, { parse_mode: 'Markdown' });  
        break;  
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const product = state.editingProduct;  
    
  switch (state.editingField) {  
    case 'title':  
      product.title = text;  
      bot.sendMessage(chatId, `üñ§‚úÖ –ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${text}`);  
      break;  
    case 'desc':  
      product.desc = text;  
      bot.sendMessage(chatId, `üñ§‚úÖ –û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ`);  
      break;  
    case 'price':  
      const price = parseFloat(text);  
      if (isNaN(price)) {  
        bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç');  
      } else {  
        product.price = price;  
        bot.sendMessage(chatId, `üñ§‚úÖ –¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ‚Ç¥${price}`);  
      }  
      break;  
    case 'sizes':  
      const sizes = text.split(',').map(s => s.trim()).filter(s => s);  
      if (sizes.length === 0) {  
        bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏');  
      } else {  
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        const newQuantities = {};
        sizes.forEach(size => {
          newQuantities[size] = product.quantities[size] || 0;
        });
        product.quantities = newQuantities;
        bot.sendMessage(chatId, `üñ§‚úÖ –†–æ–∑–º—ñ—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${sizes.join(', ')}`);  
      }  
      break;  
    case 'quantities':  
      try {
        const newQuantities = {};
        const parts = text.split(',');
        parts.forEach(part => {
          const [size, qty] = part.split(':').map(s => s.trim());
          const quantity = parseInt(qty);
          if (isNaN(quantity)) throw new Error();
          newQuantities[size] = quantity;
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        const sizesExist = Object.keys(newQuantities).every(size => product.quantities[size] !== undefined);
        if (!sizesExist) {
          bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏');
          return;
        }
        
        product.quantities = newQuantities;
        bot.sendMessage(chatId, `üñ§‚úÖ –ö—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ`);
      } catch (e) {
        bot.sendMessage(chatId, 'üñ§‚ùå –§–æ—Ä–º–∞—Ç: S:10,M:5');
        return;
      }
      break;
  }  
    
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ
  delete state.editingField;  
  saveData();
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
function handleDeletingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    products.splice(index, 1);
    saveData();
    
    const msg = `
üíÄ *–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî
${product.title}
    `;
    
    bot.sendMessage(chatId, msg, { parse_mode: 'Markdown' });
    showMainMenu(chatId);
  } else {
    bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä');
  }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function handleMovingProduct(chatId, text) {
  const state = userStates[chatId];

  if (!state.selectedIndex) {  
    const index = parseInt(text) - 1;  
    if (index >= 0 && index < products.length) {  
      state.selectedIndex = index;  
      bot.sendMessage(chatId, 'üñ§‚ÜïÔ∏è –ù–∞ —è–∫—É –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏?');  
    } else {  
      bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä');  
    }  
  } else {  
    const newIndex = parseInt(text) - 1;  
    if (newIndex >= 0 && newIndex < products.length) {  
      const product = products[state.selectedIndex];  
      products.splice(state.selectedIndex, 1);  
      products.splice(newIndex, 0, product);  
      saveData();  
      bot.sendMessage(chatId, `üñ§‚úÖ –ü–æ—Ä—è–¥–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ`);  
      showMainMenu(chatId);  
    } else {  
      bot.sendMessage(chatId, 'üñ§‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è');  
    }  
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üñ§üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  loadData();
});
