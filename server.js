require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID;
const DATA_FILE = 'data.json';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!TELEGRAM_TOKEN || !ADMIN_CHAT_ID) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –∏ TELEGRAM_ADMIN_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
  console.error(`‚ÄºÔ∏è Polling error: ${error.code} - ${error.message}`);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
let products = [];
let orders = [];

function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE));
      products = data.products || [];
      orders = data.orders || [];
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤, ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

function saveData() {
  try {
    const data = JSON.stringify({ products, orders }, null, 2);
    fs.writeFileSync(DATA_FILE, data);
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

// Middleware
app.use(express.json());
app.use(express.static('public'));

// API –¥–ª—è —Å–∞–π—Ç–∞
app.get('/api/products', (req, res) => {
  const availableProducts = products
    .filter(p => p.quantity > 0)
    .map(p => ({
      ...p,
      available: p.quantity > 0
    }));
  res.json(availableProducts);
});

app.get('/api/photo/:fileId', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const fileUrl = await bot.getFileLink(fileId);
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    response.data.pipe(res);
  } catch (error) {
    console.error('Error fetching photo:', error);
    res.status(404).send('–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
  }
});

app.post('/api/order', (req, res) => {
  const { name, contact, items } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤  
  let validItems = [];  
  let error = null;  
  
  items.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    if (!product) {  
      error = `–¢–æ–≤–∞—Ä ${item.title} –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`;  
    } else if (product.quantity < item.qty) {  
      error = `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É: ${product.title} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å: ${product.quantity})`;  
    } else {  
      validItems.push(item);  
    }  
  });  
  
  if (error || validItems.length === 0) {  
    return res.status(400).json({   
      success: false,  
      message: error || '–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'  
    });  
  }  
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    product.quantity -= item.qty;  
  });  
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞  
  const newOrder = {  
    id: Date.now(),  
    date: new Date().toISOString(),  
    name,  
    contact,  
    items: validItems  
  };  
  
  orders.push(newOrder);  
  saveData();  
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram  
  let message = `üì¶ *–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!* #${newOrder.id}\n\n`;  
  message += `üë§ *–Ü–º'—è:* ${name}\n`;  
  message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${contact}\n\n`;  
  message += `üõí *–¢–æ–≤–∞—Ä–∏:*\n`;  
  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    message += `- ${product.title} (${item.size})\n`;  
    message += `  –¶—ñ–Ω–∞: ‚Ç¥${product.price} x ${item.qty}\n`;  
    message += `  –ó–∞–≥–∞–ª–æ–º: ‚Ç¥${(product.price * item.qty).toFixed(2)}\n`;  
  });  
  
  const total = validItems.reduce((sum, item) => {  
    const product = products.find(p => p.id === item.id);  
    return sum + (product.price * item.qty);  
  }, 0);  
  
  message += `\nüíµ *–°—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:* ‚Ç¥${total.toFixed(2)}\n`;  
  message += `‚è∞ *–î–∞—Ç–∞:* ${new Date().toLocaleString('uk-UA')}`;  
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram  
  bot.sendMessage(ADMIN_CHAT_ID, message, { parse_mode: 'Markdown' })  
    .catch(err => console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err));  
  
  res.json({ success: true });
});

// –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
const userStates = {};

// –°–æ—Å—Ç–æ—è–Ω–∏—è
const STATE = {
  IDLE: 'IDLE',
  ADDING_TITLE: 'ADDING_TITLE',
  ADDING_DESC: 'ADDING_DESC',
  ADDING_PRICE: 'ADDING_PRICE',
  ADDING_SIZES: 'ADDING_SIZES',
  ADDING_QUANTITY: 'ADDING_QUANTITY',
  ADDING_PHOTOS: 'ADDING_PHOTOS',
  EDITING_PRODUCT: 'EDITING_PRODUCT',
  EDITING_FIELD: 'EDITING_FIELD',
  DELETING_PRODUCT: 'DELETING_PRODUCT',
  MOVING_PRODUCT: 'MOVING_PRODUCT'
};

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
function resetState(chatId) {
  delete userStates[chatId];
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function showMainMenu(chatId) {
  const menu = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä', 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤'],
        ['‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä', '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä'],
        ['üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫']
      ],
      resize_keyboard: true
    }
  };

  bot.sendMessage(chatId, 'üëã –í—ñ—Ç–∞—é –≤ –ø–∞–Ω–µ–ª—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω–æ–º!', menu);  
  resetState(chatId);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  showMainMenu(chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  bot.sendMessage(chatId, '‚ùå –ü–æ—Ç–æ—á–Ω—É –¥—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ');  
  showMainMenu(chatId);
});

// =================================================
// –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –§–û–¢–û–ì–†–ê–§–ò–ô:
// =================================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
function handleAddingPhotos(chatId, msg) {
  const state = userStates[chatId];
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
  if (msg.photo) {
    if (state.productData.photos.length >= 10) {
      bot.sendMessage(chatId, '‚ùå –í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ (10)');
      return;
    }
    
    const photo = msg.photo[msg.photo.length - 1];
    state.productData.photos.push(photo.file_id);
    
    bot.sendMessage(
      chatId, 
      `üñº –î–æ–¥–∞–Ω–æ —Ñ–æ—Ç–æ ${state.productData.photos.length}/10. ` +
      `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å "–≥–æ—Ç–æ–≤–æ"`
    );
  }
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–æ"
  else if (msg.text && msg.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    if (state.productData.photos.length === 0) {
      bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞  
    const newProduct = {  
      id: Date.now(),  
      ...state.productData  
    };  
      
    products.push(newProduct);  
    saveData();  
      
    bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${newProduct.title}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!`);  
    showMainMenu(chatId);
  }
  // –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
  else {
    bot.sendMessage(
      chatId, 
      '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å "–≥–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
function handleEditingField(chatId, msg) {
  const state = userStates[chatId];
  
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  if (msg.text === '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è') {  
    bot.sendMessage(chatId, '‚úÖ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');  
    saveData();  
    showMainMenu(chatId);  
    return;  
  }  
  
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (!state.editingField) {
    switch (msg.text) {  
      case '‚úèÔ∏è –ù–∞–∑–≤–∞':  
        state.editingField = 'title';  
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:');  
        break;  
      case '‚úèÔ∏è –û–ø–∏—Å':  
        state.editingField = 'desc';  
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:');  
        break;  
      case '‚úèÔ∏è –¶—ñ–Ω–∞':  
        state.editingField = 'price';  
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É:');  
        break;  
      case '‚úèÔ∏è –†–æ–∑–º—ñ—Ä–∏':  
        state.editingField = 'sizes';  
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É:');  
        break;  
      case '‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å':  
        state.editingField = 'quantity';  
        bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É:');  
        break;  
      case '‚úèÔ∏è –§–æ—Ç–æ':  
        state.editingField = 'photos';  
        bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:');  
        break;  
    }
    return;
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª–µ –≤—ã–±—Ä–∞–Ω–æ –∏ –ø—Ä–∏—à–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  const product = state.editingProduct;  
    
  switch (state.editingField) {  
    case 'title':  
      product.title = msg.text;  
      bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${msg.text}`);  
      break;  
    case 'desc':  
      product.desc = msg.text;  
      bot.sendMessage(chatId, `‚úÖ –û–ø–∏—Å –∑–º—ñ–Ω–µ–Ω–æ`);  
      break;  
    case 'price':  
      const price = parseFloat(msg.text);  
      if (isNaN(price)) {  
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ü—ñ–Ω–∏');  
      } else {  
        product.price = price;  
        bot.sendMessage(chatId, `‚úÖ –¶—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ‚Ç¥${price}`);  
      }  
      break;  
    case 'sizes':  
      const sizes = msg.text.split(',').map(s => s.trim()).filter(s => s);  
      if (sizes.length === 0) {  
        bot.sendMessage(chatId, '‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏');  
      } else {  
        product.sizes = sizes;  
        bot.sendMessage(chatId, `‚úÖ –†–æ–∑–º—ñ—Ä–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${sizes.join(', ')}`);  
      }  
      break;  
    case 'quantity':  
      const quantity = parseInt(msg.text);  
      if (isNaN(quantity)) {  
        bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫—ñ–ª—å–∫–æ—Å—Ç—ñ');  
      } else {  
        product.quantity = quantity;  
        bot.sendMessage(chatId, `‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${quantity}`);  
      }  
      break;  
    case 'photos':  
      if (msg.photo) {  
        const photo = msg.photo[msg.photo.length - 1];  
        product.photos = [photo.file_id]; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        bot.sendMessage(chatId, `‚úÖ –§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ`);  
      } else {  
        bot.sendMessage(chatId, '‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ');  
        return; // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      }  
      break;  
  }  
    
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
  delete state.editingField;  
  saveData();
}

// =================================================
// –û–°–¢–ê–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ –ö–û–î–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
// =================================================

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_CHAT_ID) return;

  const text = msg.text;  
  const state = userStates[chatId]?.state || STATE.IDLE;  
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞  
  if (state !== STATE.IDLE && text && text.startsWith('/')) {  
    return;  
  }  
  
  switch (state) {  
    case STATE.IDLE:  
      handleIdleState(chatId, text);  
      break;  
    case STATE.ADDING_TITLE:  
      handleAddingTitle(chatId, text);  
      break;  
    case STATE.ADDING_DESC:  
      handleAddingDesc(chatId, text);  
      break;  
    case STATE.ADDING_PRICE:  
      handleAddingPrice(chatId, text);  
      break;  
    case STATE.ADDING_SIZES:  
      handleAddingSizes(chatId, text);  
      break;  
    case STATE.ADDING_QUANTITY:  
      handleAddingQuantity(chatId, text);  
      break;  
    case STATE.ADDING_PHOTOS:  
      handleAddingPhotos(chatId, msg);  
      break;  
    case STATE.EDITING_PRODUCT:  
      handleEditingProduct(chatId, text);  
      break;  
    case STATE.EDITING_FIELD:  
      handleEditingField(chatId, msg);  
      break;  
    case STATE.DELETING_PRODUCT:  
      handleDeletingProduct(chatId, text);  
      break;  
    case STATE.MOVING_PRODUCT:  
      handleMovingProduct(chatId, text);  
      break;  
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function handleIdleState(chatId, text) {
  switch (text) {
    case '‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä':
      userStates[chatId] = {
        state: STATE.ADDING_TITLE,
        productData: {}
      };
      bot.sendMessage(chatId, 'üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:');
      break;

    case 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î');  
      } else {  
        let message = 'üì¶ *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:*\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
          message += `   –¶—ñ–Ω–∞: ‚Ç¥${p.price}\n`;  
          message += `   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${p.quantity}\n`;  
          message += `   –†–æ–∑–º—ñ—Ä–∏: ${p.sizes.join(', ')}\n\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è');  
      } else {  
        userStates[chatId] = { state: STATE.EDITING_PRODUCT };  
        let message = 'üìã –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message);  
      }  
      break;  
        
    case '‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è –¢–æ–≤–∞—Ä—ñ–≤ –Ω–µ–º–∞—î –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');  
      } else {  
        userStates[chatId] = { state: STATE.DELETING_PRODUCT };  
        let message = 'üóë –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message);  
      }  
      break;  
        
    case 'üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è':  
      if (orders.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î');  
      } else {  
        let message = 'üìã *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*\n\n';  
        orders.slice(-5).reverse().forEach(order => {  
          message += `üÜî #${order.id}\n`;  
          message += `üë§ ${order.name}\n`;  
          message += `üìû ${order.contact}\n`;  
          message += `üìÖ ${new Date(order.date).toLocaleString('uk-UA')}\n`;  
          message += `üõí ${order.items.length} —Ç–æ–≤–∞—Ä(—ñ–≤)\n\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });  
      }  
      break;  
        
    case 'üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫':  
      if (products.length < 2) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 2 —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –ø–æ—Ä—è–¥–∫—É');  
      } else {  
        userStates[chatId] = { state: STATE.MOVING_PRODUCT };  
        let message = '‚ÜïÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è:\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message);  
      }  
      break;  
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
function handleAddingTitle(chatId, text) {
  userStates[chatId].productData.title = text;
  userStates[chatId].state = STATE.ADDING_DESC;
  bot.sendMessage(chatId, 'üìù –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É:');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
function handleAddingDesc(chatId, text) {
  userStates[chatId].productData.desc = text;
  userStates[chatId].state = STATE.ADDING_PRICE;
  bot.sendMessage(chatId, 'üí∞ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ü—ñ–Ω—É —Ç–æ–≤–∞—Ä—É (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ):');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
function handleAddingPrice(chatId, text) {
  const price = parseFloat(text);
  if (isNaN(price)) {
    bot.sendMessage(chatId, '‚ùå –¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    return;
  }

  userStates[chatId].productData.price = price;  
  userStates[chatId].state = STATE.ADDING_SIZES;  
  bot.sendMessage(chatId, 'üìè –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: S,M,L):');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
function handleAddingSizes(chatId, text) {
  const sizes = text.split(',').map(s => s.trim()).filter(s => s);
  if (sizes.length === 0) {
    bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä–æ–∑–º—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    return;
  }

  userStates[chatId].productData.sizes = sizes;  
  userStates[chatId].state = STATE.ADDING_QUANTITY;  
  bot.sendMessage(chatId, 'üî¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É (–≤—ñ–¥ 1 –¥–æ 100):');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
function handleAddingQuantity(chatId, text) {
  const quantity = parseInt(text);
  if (isNaN(quantity) || quantity < 1 || quantity > 100) {
    bot.sendMessage(chatId, '‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 100. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
    return;
  }

  userStates[chatId].productData.quantity = quantity;  
  userStates[chatId].state = STATE.ADDING_PHOTOS;  
  userStates[chatId].productData.photos = [];  
  bot.sendMessage(chatId, 'üñº –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É (–¥–æ 10 —Ñ–æ—Ç–æ)');
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
function handleEditingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    userStates[chatId] = {
      state: STATE.EDITING_FIELD,
      editingProductId: product.id,
      editingProduct: product
    };

    const menu = {  
      reply_markup: {  
        keyboard: [  
          ['‚úèÔ∏è –ù–∞–∑–≤–∞', '‚úèÔ∏è –û–ø–∏—Å'],  
          ['‚úèÔ∏è –¶—ñ–Ω–∞', '‚úèÔ∏è –†–æ–∑–º—ñ—Ä–∏'],  
          ['‚úèÔ∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å', '‚úèÔ∏è –§–æ—Ç–æ'],  
          ['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è']  
        ],  
        resize_keyboard: true  
      }  
    };  
      
    bot.sendMessage(chatId, `‚úèÔ∏è –í–∏ –æ–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: ${product.title}\n–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?`, menu);  
  } else {  
    bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');  
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
function handleDeletingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    products.splice(index, 1);
    saveData();
    bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${product.title}" –≤–∏–¥–∞–ª–µ–Ω–æ`);
    showMainMenu(chatId);
  } else {
    bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');
  }
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
function handleMovingProduct(chatId, text) {
  const state = userStates[chatId];

  if (!state.selectedIndex) {  
    const index = parseInt(text) - 1;  
    if (index >= 0 && index < products.length) {  
      state.selectedIndex = index;  
      bot.sendMessage(chatId, '‚ÜïÔ∏è –ù–∞ —è–∫—É –ø–æ–∑–∏—Ü—ñ—é –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏? –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä:');  
    } else {  
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');  
    }  
  } else {  
    const newIndex = parseInt(text) - 1;  
    if (newIndex >= 0 && newIndex < products.length) {  
      const product = products[state.selectedIndex];  
      products.splice(state.selectedIndex, 1);  
      products.splice(newIndex, 0, product);  
      saveData();  
      bot.sendMessage(chatId, `‚úÖ –ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ`);  
      showMainMenu(chatId);  
    } else {  
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:');  
    }  
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  loadData();
});
