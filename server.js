require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 3000;

if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.TELEGRAM_ADMIN_CHAT_ID) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

bot.on('polling_error', (error) => {
  console.error(`‚ÄºÔ∏è –û—à–∏–±–∫–∞ polling: ${error.code} - ${error.message}`);
});

let products = [];
let orders = [];
const DATA_FILE = 'data.json';

function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE));
      products = data.products || [];
      orders = data.orders || [];
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤, ${orders.length} –∑–∞–∫–∞–∑–æ–≤`);
    }
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

function saveData() {
  try {
    const data = JSON.stringify({ products, orders }, null, 2);
    fs.writeFileSync(DATA_FILE, data);
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
  }
}

app.use(express.json());
app.use(express.static('public'));

app.get('/api/products', (req, res) => {
  const availableProducts = products
    .filter(p => p.quantity > 0)
    .map(p => ({ ...p, available: p.quantity > 0 }));
  res.json(availableProducts);
});

app.get('/api/photo/:fileId', async (req, res) => {
  try {
    const fileId = req.params.fileId;
    const fileUrl = await bot.getFileLink(fileId);
    const response = await axios.get(fileUrl, { responseType: 'stream' });
    response.data.pipe(res);
  } catch (error) {
    res.status(404).send('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }
});

app.post('/api/order', (req, res) => {
  const { name, contact, items } = req.body;
  
  let validItems = [];  
  let error = null;  
  
  items.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    if (!product) error = `–¢–æ–≤–∞—Ä ${item.title} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;  
    else if (product.quantity < item.qty) error = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞: ${product.title}`;  
    else validItems.push(item);  
  });  
  
  if (error || validItems.length === 0) {  
    return res.status(400).json({   
      success: false,  
      message: error || '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'  
    });  
  }  
  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    product.quantity -= item.qty;  
  });  
  
  const newOrder = {  
    id: Date.now(),  
    date: new Date().toISOString(),  
    name,  
    contact,  
    items: validItems  
  };  
  
  orders.push(newOrder);  
  saveData();  
  
  let message = `üì¶ <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b> #${newOrder.id}\n\n`;  
  message += `üë§ <b>–ò–º—è:</b> ${name}\n`;  
  message += `üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}\n\n`;  
  message += `üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n`;  
  
  validItems.forEach(item => {  
    const product = products.find(p => p.id === item.id);  
    message += `- ${product.title} (${item.size})\n`;  
    message += `  –¶–µ–Ω–∞: ‚Ç¥${product.price} x ${item.qty}\n`;  
    message += `  –ò—Ç–æ–≥–æ: ‚Ç¥${(product.price * item.qty).toFixed(2)}\n`;  
  });  
  
  const total = validItems.reduce((sum, item) => {  
    const product = products.find(p => p.id === item.id);  
    return sum + (product.price * item.qty);  
  }, 0);  
  
  message += `\nüíµ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ‚Ç¥${total.toFixed(2)}\n`;  
  message += `‚è∞ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('uk-UA')}`;  
  
  bot.sendMessage(process.env.TELEGRAM_ADMIN_CHAT_ID, message, { parse_mode: 'HTML' })  
    .catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err));  
  
  res.json({ success: true });
});

const userStates = {};

const STATE = {
  IDLE: 'IDLE',
  ADDING_TITLE: 'ADDING_TITLE',
  ADDING_DESC: 'ADDING_DESC',
  ADDING_PRICE: 'ADDING_PRICE',
  ADDING_SIZES: 'ADDING_SIZES',
  ADDING_QUANTITY: 'ADDING_QUANTITY',
  ADDING_PHOTOS: 'ADDING_PHOTOS',
  EDITING_PRODUCT: 'EDITING_PRODUCT',
  EDITING_FIELD: 'EDITING_FIELD',
  DELETING_PRODUCT: 'DELETING_PRODUCT',
  MOVING_PRODUCT: 'MOVING_PRODUCT',
  EDITING_PHOTOS: 'EDITING_PHOTOS'
};

function resetState(chatId) {
  delete userStates[chatId];
}

function showMainMenu(chatId) {
  const menu = {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'],
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'],
        ['üì¶ –ó–∞–∫–∞–∑—ã', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫']
      ],
      resize_keyboard: true
    }
  };

  bot.sendMessage(chatId, 'üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!</b>', { parse_mode: 'HTML', ...menu });  
  resetState(chatId);
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== process.env.TELEGRAM_ADMIN_CHAT_ID) return;
  showMainMenu(chatId);
});

bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== process.env.TELEGRAM_ADMIN_CHAT_ID) return;
  bot.sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');  
  showMainMenu(chatId);
});

function handleAddingPhotos(chatId, msg) {
  const state = userStates[chatId];
  
  if (msg.photo) {
    if (state.productData.photos.length >= 10) {
      bot.sendMessage(chatId, '‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ!</b>', { parse_mode: 'HTML' });
      return;
    }
    
    const photo = msg.photo[msg.photo.length - 1];
    state.productData.photos.push(photo.file_id);
    
    const count = state.productData.photos.length;
    const hearts = 'üíú'.repeat(count) + 'ü§ç'.repeat(10-count);
    
    bot.sendMessage(
      chatId, 
      `üñº <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ:</b> ${count}/10\n${hearts}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "<b>–≥–æ—Ç–æ–≤–æ</b>"`, 
      { parse_mode: 'HTML' }
    );
  }
  else if (msg.text && msg.text.toLowerCase() === '–≥–æ—Ç–æ–≤–æ') {
    if (state.productData.photos.length === 0) {
      bot.sendMessage(chatId, '‚ùå <b>–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!</b>', { parse_mode: 'HTML' });
      return;
    }
    
    const newProduct = {  
      id: Date.now(),  
      ...state.productData  
    };  
      
    products.push(newProduct);  
    saveData();  
      
    bot.sendMessage(chatId, `üéâ <b>–¢–æ–≤–∞—Ä "${newProduct.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>`, { parse_mode: 'HTML' });  
    showMainMenu(chatId);
  }
  else {
    bot.sendMessage(chatId, '‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "<b>–≥–æ—Ç–æ–≤–æ</b>"', { parse_mode: 'HTML' });
  }
}

function handleEditingPhotos(chatId, msg) {
  const state = userStates[chatId];
  
  if (msg.photo) {
    if (state.photos.length >= 10) {
      bot.sendMessage(chatId, '‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10 —Ñ–æ—Ç–æ!</b>', { parse_mode: 'HTML' });
      return;
    }
    
    const photo = msg.photo[msg.photo.length - 1];
    state.photos.push(photo.file_id);
    
    const count = state.photos.length;
    const hearts = 'üíú'.repeat(count) + 'ü§ç'.repeat(10-count);
    
    bot.sendMessage(
      chatId, 
      `üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ:</b> ${count}/10\n${hearts}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "<b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>"`, 
      { parse_mode: 'HTML' }
    );
  }
  else if (msg.text && msg.text.toLowerCase() === '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å') {
    if (state.photos.length === 0) {
      bot.sendMessage(chatId, '‚ùå <b>–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!</b>', { parse_mode: 'HTML' });
      return;
    }
    
    const product = state.editingProduct;
    product.photos = state.photos;
    saveData();
    
    bot.sendMessage(chatId, '‚úÖ <b>–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>', { parse_mode: 'HTML' });
    
    userStates[chatId].state = STATE.EDITING_FIELD;
    delete userStates[chatId].photos;
    
    const menu = {  
      reply_markup: {  
        keyboard: [  
          ['‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', '‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ'],  
          ['‚úèÔ∏è –¶–µ–Ω–∞', '‚úèÔ∏è –†–∞–∑–º–µ—Ä—ã'],  
          ['‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '‚úèÔ∏è –§–æ—Ç–æ'],  
          ['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']  
        ],  
        resize_keyboard: true  
      }  
    };
    
    bot.sendMessage(chatId, `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> ${product.title}`, { parse_mode: 'HTML', ...menu });  
  }
  else {
    bot.sendMessage(chatId, '‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "<b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>"', { parse_mode: 'HTML' });
  }
}

function handleEditingField(chatId, msg) {
  const state = userStates[chatId];
  
  if (msg.text === '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ') {  
    bot.sendMessage(chatId, '‚úÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>', { parse_mode: 'HTML' });  
    saveData();  
    showMainMenu(chatId);  
    return;  
  }  
  
  if (!state.editingField) {
    switch (msg.text) {  
      case '‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ':  
        state.editingField = 'title';  
        bot.sendMessage(chatId, '‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b>', { parse_mode: 'HTML' });  
        break;  
      case '‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ':  
        state.editingField = 'desc';  
        bot.sendMessage(chatId, 'üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>', { parse_mode: 'HTML' });  
        break;  
      case '‚úèÔ∏è –¶–µ–Ω–∞':  
        state.editingField = 'price';  
        bot.sendMessage(chatId, 'üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:</b>', { parse_mode: 'HTML' });  
        break;  
      case '‚úèÔ∏è –†–∞–∑–º–µ—Ä—ã':  
        state.editingField = 'sizes';  
        bot.sendMessage(chatId, 'üìè <b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>', { parse_mode: 'HTML' });  
        break;  
      case '‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':  
        state.editingField = 'quantity';  
        bot.sendMessage(chatId, 'üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b>', { parse_mode: 'HTML' });  
        break;  
      case '‚úèÔ∏è –§–æ—Ç–æ':  
        state.editingField = 'photos';  
        userStates[chatId] = {
          state: STATE.EDITING_PHOTOS,
          editingProduct: state.editingProduct,
          photos: []
        };
        bot.sendMessage(
          chatId, 
          'üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (–¥–æ 10)</b>\n–í–≤–µ–¥–∏—Ç–µ "<b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å</b>" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ', 
          { parse_mode: 'HTML' }
        );  
        return;
    }
    return;
  }
  
  const product = state.editingProduct;  
    
  switch (state.editingField) {  
    case 'title':  
      product.title = msg.text;  
      bot.sendMessage(chatId, `‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ:</b>\n${msg.text}`, { parse_mode: 'HTML' });  
      break;  
    case 'desc':  
      product.desc = msg.text;  
      bot.sendMessage(chatId, '‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>', { parse_mode: 'HTML' });  
      break;  
    case 'price':  
      const price = parseFloat(msg.text);  
      if (isNaN(price)) {  
        bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!</b>', { parse_mode: 'HTML' });  
      } else {  
        product.price = price;  
        bot.sendMessage(chatId, `‚úÖ <b>–¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:</b> ‚Ç¥${price}`, { parse_mode: 'HTML' });  
      }  
      break;  
    case 'sizes':  
      const sizes = msg.text.split(',').map(s => s.trim()).filter(s => s);  
      if (sizes.length === 0) {  
        bot.sendMessage(chatId, '‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã!</b>', { parse_mode: 'HTML' });  
      } else {  
        product.sizes = sizes;  
        bot.sendMessage(chatId, `‚úÖ <b>–†–∞–∑–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b> ${sizes.join(', ')}`, { parse_mode: 'HTML' });  
      }  
      break;  
    case 'quantity':  
      const quantity = parseInt(msg.text);  
      if (isNaN(quantity)) {  
        bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!</b>', { parse_mode: 'HTML' });  
      } else {  
        product.quantity = quantity;  
        bot.sendMessage(chatId, `‚úÖ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ:</b> ${quantity}`, { parse_mode: 'HTML' });  
      }  
      break;  
  }  
    
  delete state.editingField;  
  saveData();
}

bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== process.env.TELEGRAM_ADMIN_CHAT_ID) return;

  const text = msg.text;  
  const state = userStates[chatId]?.state || STATE.IDLE;  
  
  if (state !== STATE.IDLE && text && text.startsWith('/')) return;  
  
  switch (state) {  
    case STATE.IDLE:  
      handleIdleState(chatId, text);  
      break;  
    case STATE.ADDING_TITLE:  
      handleAddingTitle(chatId, text);  
      break;  
    case STATE.ADDING_DESC:  
      handleAddingDesc(chatId, text);  
      break;  
    case STATE.ADDING_PRICE:  
      handleAddingPrice(chatId, text);  
      break;  
    case STATE.ADDING_SIZES:  
      handleAddingSizes(chatId, text);  
      break;  
    case STATE.ADDING_QUANTITY:  
      handleAddingQuantity(chatId, text);  
      break;  
    case STATE.ADDING_PHOTOS:  
      handleAddingPhotos(chatId, msg);  
      break;  
    case STATE.EDITING_PRODUCT:  
      handleEditingProduct(chatId, text);  
      break;  
    case STATE.EDITING_FIELD:  
      handleEditingField(chatId, msg);  
      break;  
    case STATE.EDITING_PHOTOS:  
      handleEditingPhotos(chatId, msg);  
      break;  
    case STATE.DELETING_PRODUCT:  
      handleDeletingProduct(chatId, text);  
      break;  
    case STATE.MOVING_PRODUCT:  
      handleMovingProduct(chatId, text);  
      break;  
  }
});

function handleIdleState(chatId, text) {
  switch (text) {
    case '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
      userStates[chatId] = {
        state: STATE.ADDING_TITLE,
        productData: { photos: [] }
      };
      bot.sendMessage(chatId, 'üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>', { parse_mode: 'HTML' });
      break;

    case 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç</b>', { parse_mode: 'HTML' });  
      } else {  
        let message = 'üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. <b>${p.title}</b>\n`;  
          message += `   üí∞ –¶–µ–Ω–∞: <b>‚Ç¥${p.price}</b>\n`;  
          message += `   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${p.quantity}</b>\n`;  
          message += `   üìè –†–∞–∑–º–µ—Ä—ã: <b>${p.sizes.join(', ')}</b>\n\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });  
      }  
      break;  
        
    case '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è <b>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>', { parse_mode: 'HTML' });  
      } else {  
        userStates[chatId] = { state: STATE.EDITING_PRODUCT };  
        let message = '‚úèÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });  
      }  
      break;  
        
    case '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':  
      if (products.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è <b>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>', { parse_mode: 'HTML' });  
      } else {  
        userStates[chatId] = { state: STATE.DELETING_PRODUCT };  
        let message = 'üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });  
      }  
      break;  
        
    case 'üì¶ –ó–∞–∫–∞–∑—ã':  
      if (orders.length === 0) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤</b>', { parse_mode: 'HTML' });  
      } else {  
        let message = 'üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n';  
        orders.slice(-5).reverse().forEach(order => {  
          message += `üÜî <b>#${order.id}</b>\n`;  
          message += `üë§ <b>${order.name}</b>\n`;  
          message += `üìû ${order.contact}\n`;  
          message += `üìÖ ${new Date(order.date).toLocaleString('uk-UA')}\n`;  
          message += `üõí <b>${order.items.length} —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });  
      }  
      break;  
        
    case 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫':  
      if (products.length < 2) {  
        bot.sendMessage(chatId, '‚ÑπÔ∏è <b>–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ç–æ–≤–∞—Ä–∞</b>', { parse_mode: 'HTML' });  
      } else {  
        userStates[chatId] = { state: STATE.MOVING_PRODUCT };  
        let message = '‚ÜïÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:</b>\n\n';  
        products.forEach((p, i) => {  
          message += `${i+1}. ${p.title}\n`;  
        });  
        bot.sendMessage(chatId, message, { parse_mode: 'HTML' });  
      }  
      break;  
  }
}

function handleAddingTitle(chatId, text) {
  userStates[chatId].productData.title = text;
  userStates[chatId].state = STATE.ADDING_DESC;
  bot.sendMessage(chatId, 'üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>', { parse_mode: 'HTML' });
}

function handleAddingDesc(chatId, text) {
  userStates[chatId].productData.desc = text;
  userStates[chatId].state = STATE.ADDING_PRICE;
  bot.sendMessage(chatId, 'üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):</b>', { parse_mode: 'HTML' });
}

function handleAddingPrice(chatId, text) {
  const price = parseFloat(text);
  if (isNaN(price)) {
    bot.sendMessage(chatId, '‚ùå <b>–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });
    return;
  }

  userStates[chatId].productData.price = price;  
  userStates[chatId].state = STATE.ADDING_SIZES;  
  bot.sendMessage(chatId, 'üìè <b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: S,M,L):</b>', { parse_mode: 'HTML' });
}

function handleAddingSizes(chatId, text) {
  const sizes = text.split(',').map(s => s.trim()).filter(s => s);
  if (sizes.length === 0) {
    bot.sendMessage(chatId, '‚ùå <b>–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });
    return;
  }

  userStates[chatId].productData.sizes = sizes;  
  userStates[chatId].state = STATE.ADDING_QUANTITY;  
  bot.sendMessage(chatId, 'üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–æ—Ç 1 –¥–æ 100):</b>', { parse_mode: 'HTML' });
}

function handleAddingQuantity(chatId, text) {
  const quantity = parseInt(text);
  if (isNaN(quantity) || quantity < 1 || quantity > 100) {
    bot.sendMessage(chatId, '‚ùå <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 100!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });
    return;
  }

  userStates[chatId].productData.quantity = quantity;  
  userStates[chatId].state = STATE.ADDING_PHOTOS;  
  bot.sendMessage(
    chatId, 
    'üñº <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–¥–æ 10 —Ñ–æ—Ç–æ)</b>\n–í–≤–µ–¥–∏—Ç–µ "<b>–≥–æ—Ç–æ–≤–æ</b>" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ', 
    { parse_mode: 'HTML' }
  );
}

function handleEditingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    userStates[chatId] = {
      state: STATE.EDITING_FIELD,
      editingProductId: product.id,
      editingProduct: product
    };

    const menu = {  
      reply_markup: {  
        keyboard: [  
          ['‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', '‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ'],  
          ['‚úèÔ∏è –¶–µ–Ω–∞', '‚úèÔ∏è –†–∞–∑–º–µ—Ä—ã'],  
          ['‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '‚úèÔ∏è –§–æ—Ç–æ'],  
          ['‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']  
        ],  
        resize_keyboard: true  
      }  
    };  
      
    bot.sendMessage(chatId, `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> ${product.title}`, { parse_mode: 'HTML', ...menu });  
  } else {  
    bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });  
  }
}

function handleDeletingProduct(chatId, text) {
  const index = parseInt(text) - 1;
  if (index >= 0 && index < products.length) {
    const product = products[index];
    products.splice(index, 1);
    saveData();
    bot.sendMessage(chatId, `üóëÔ∏è <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:</b>\n"${product.title}"`, { parse_mode: 'HTML' });
    showMainMenu(chatId);
  } else {
    bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });
  }
}

function handleMovingProduct(chatId, text) {
  const state = userStates[chatId];

  if (!state.selectedIndex) {  
    const index = parseInt(text) - 1;  
    if (index >= 0 && index < products.length) {  
      state.selectedIndex = index;  
      bot.sendMessage(chatId, '‚ÜïÔ∏è <b>–ù–∞ –∫–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å?</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:', { parse_mode: 'HTML' });  
    } else {  
      bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });  
    }  
  } else {  
    const newIndex = parseInt(text) - 1;  
    if (newIndex >= 0 && newIndex < products.length) {  
      const product = products[state.selectedIndex];  
      products.splice(state.selectedIndex, 1);  
      products.splice(newIndex, 0, product);  
      saveData();  
      bot.sendMessage(chatId, '‚úÖ <b>–ü–æ—Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>', { parse_mode: 'HTML' });  
      showMainMenu(chatId);  
    } else {  
      bot.sendMessage(chatId, '‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:', { parse_mode: 'HTML' });  
    }  
  }
}

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  loadData();
});
